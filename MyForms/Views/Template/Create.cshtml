@model TemplateCreateVM
<form method="post" enctype="multipart/form-data">
    <div class="card col-md-8 mx-auto border-0">
        <div class="card-header">
            <div asp-validation-summary="ModelOnly" class="text-danger col-md-8 mx-auto"></div>
            <div class="form-floating my-3 col-md-8 mx-auto">
                <input asp-for="Template.Title" placeholder="" class="form-control" />
                <label asp-for="Template.Title"></label>
                <span asp-validation-for="Template.Title" class="text-danger"></span>
            </div>
            <div class=" my-3 col-md-8 mx-auto">
                <label asp-for="Template.Topic" class="form-label"></label>
                <select class="form-select" asp-for="Template.TopicId" asp-items="Model.Topics">
                </select>
            </div>

            <div class="form-floating my-3 col-md-8 mx-auto">
                <textarea asp-for="Template.Description" placeholder="" class="form-control" rows="3" style="height:80px">                </textarea>
                <label asp-for="Template.Description"></label>
                <span asp-validation-for="Template.Description" class="text-danger"></span>
            </div>
            <div class="my-3 col-md-8 mx-auto">
                <label asp-for="Template.Image" class="form-label"></label>
                <input asp-for="Template.Image" type="file" class="form-control">
            </div>
      

            <div class="my-3 col-md-8 mx-auto">
               <div class="input-group">
                  <div class="input-group-text">#</div>
                  <input type="text"  id="tag-input" class="form-control" placeholder="Tags">             
                  <button id="add-tag" class="btn btn-success">
                     <i class="bi bi-plus-square"></i>
                  </button>
                </div>
                <div id="tag-container" class="mt-2">
                </div>
            </div>
            
            <div class="form-check my-3 col-md-8 mx-md-auto">
                <label for="is-private-check">Is Private</label>
                <input id="is-private-check" asp-for="Template.IsPrivate" class="form-check-input" />
            </div>
            <div id="add-email" hidden class="my-3 col-md-8 mx-auto">
                 <div class="input-group">
                    <input type="email" id="email-input" class="form-control" placeholder="enter email" />
                    <button id="add-email-btn" class="btn btn-success">
                        <i class="bi bi-plus-square"></i>
                    </button>
                </div>
                <div id="email-error" class="alert alert-danger mt-2 d-none"  role="alert">
                    Пользователь с таким email не найден.
                </div>
                <div id="email-container" class="mt-2">
                </div>
            </div>
            
        </div>
        <div class="sticky-top py-2 bg-dark shadow-sm">
            <div class="row justify-content-center g-2">
                <div class=" col-auto">
                    <button id="delete-question" class="btn btn-outline-danger">
                        <i class="bi bi-trash3-fill"></i>
                    </button>
                </div>
                <div class=" col-auto">
                    <button id="create-question" class="btn btn-outline-success">
                        <i class="bi bi-plus-lg"></i>
                    </button>
                </div>
                <div class=" col-auto">
                    <button id="select-all" class="btn btn-outline-primary">
                        Select All <i class="bi bi-check2-all"></i>
                    </button>
                </div>
            </div>
        </div>

        <div class="card-body ">
            <div id="question-container">
                 <template id="question-template">
                    <div class="question-item border border-secondary border-3  p-3 rounded-3 my-3">
                       <div class="text-start check-wrap">
                           <input  type="checkbox" class="form-check-input border-2 border-primary-subtle " />
                       </div>
                        <div class="row my-2 ">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input placeholder="" name="Template.Questions[{{index}}].Text"
                                           class="form-control border-primary border-2  " />
                                    <label class="text-muted fw-medium" >Question Text</label>
                                </div>
                            </div>
                            <div class="col-md-6 ">
                                <select  name="Template.Questions[{{index}}].Type" class="form-select border-primary border-2 py-3 question-type"
                                    asp-items="@Html.GetEnumSelectList<QuestionType>()">
                                </select>
                            </div>
                        </div>
                        <div class="row  mt-3 ">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    <label class="form-check-label fw-medium">Add Description</label>
                                    <input  type="checkbox" class="form-check-input description-check">
                                </div>
                                <div class="form-check form-switch">
                                    <label class="form-check-label fw-medium">Show in table</label>
                                    <input name="Template.Questions[{{index}}].ShowInTable" value="true" type="checkbox" class="form-check-input">
                                </div>
                            </div>
                            <div  class="col-md-8 d-none description-container">
                                <textarea name="Template.Questions[{{index}}].Description" class="form-control border-secondary border-2 fs-5"
                                          rows="3" placeholder="Enter description..."></textarea>
                            </div>
                        </div>
                        <div class="mt-3 answer-container">                          
                        </div>                   
                    </div>
                </template> 
            </div>
            
        </div>
            @* <partial name="_LikePartial" /> *@
        <div>
            @* <partial name="_CommentsPartial" /> *@
        </div>
        <div class="col-md-3 mx-md-auto">
            <input type="submit" value="Create" class="btn btn-success w-100" />
        </div>
    </div>
</form>

@section Scripts{
    <script>
       document.addEventListener('DOMContentLoaded',function ()
       {
            const addTagBtn=document.getElementById("add-tag");
            const tagInput=document.getElementById("tag-input");
            const tagContainer=document.getElementById("tag-container");

            const isPrivateCheckBox=document.getElementById("is-private-check");
            const emailSection=document.getElementById("add-email");
            const emailInput=document.getElementById("email-input");
            const addEmailBtn=document.getElementById("add-email-btn");
            const emailContainer=document.getElementById("email-container");
            const emailErrorMsg= document.getElementById('email-error');
            const questionTemplate=document.getElementById("question-template");
            const questionContainer=document.getElementById("question-container");
            const createQuestionBtn=document.getElementById("create-question");
            const deleteQuestionBtn=document.getElementById("delete-question");
            const selectAllBtn=document.getElementById("select-all");
            let questionCount=0;
            let isCheck=true;
            function createBadge(inputValue,inputName,container){
                  const input= document.createElement("input");
                  input.value= inputValue;
                  input.hidden=true;
                  input.name=inputName;

                  const tagBadge = document.createElement("span");
                  tagBadge.classList.add("badge", "rounded-pill", "bg-secondary","d-inline-flex", "align-items-center", "m-1");
                  tagBadge.innerHTML = `${inputValue} <button type="button" class="btn-close btn-close-white ms-1"></button>`;

                  tagBadge.querySelector(".btn-close").addEventListener('click',()=>{
                      tagBadge.remove();
                      input.remove();
                  });
                  container.appendChild(tagBadge);
                  container.appendChild(input);
             }

            addTagBtn.addEventListener('click',(e)=>{
                e.preventDefault();
                 const tagInputValue=tagInput.value.trim();
                 if(tagInputValue.length<1 || isDuplicate("#tag-container input",tagInputValue)){
                    return;
                 }
                 createBadge(tagInputValue,"tags",tagContainer);
                  tagInput.value="";
            })

            isPrivateCheckBox.addEventListener('change',()=>{
                emailSection.hidden=!isPrivateCheckBox.checked;
            });


             addEmailBtn.addEventListener('click',async (e)=>{
                 e.preventDefault();
                 let emailValue= emailInput.value.trim();
                 if(emailValue.length<1|| isDuplicate("#email-container input",emailValue)){
                     return;
                 }
                 if(!await checkEmail(emailValue)){
                     emailErrorMsg.classList.remove("d-none");
                     return;
                 }
                  emailErrorMsg.classList.add("d-none");
                 
                  createBadge(emailValue,"emails",emailContainer);
                  emailInput.value="";
             })

             emailInput.addEventListener('keypress',(e)=>{
                 if(e.key=="Enter"){
                    e.preventDefault();
                    addEmailBtn.click();
                 }
             });

             function isDuplicate(selector,value){
                return [...document.querySelectorAll(selector)].some(x=>x.value==value);
             }
             async function checkEmail(email){
                 const response=  await fetch(`/checkEmail?email=${email}`);
                  const data = await response.json();
                  console.log(data);
                  return data.isExist;
             }
             createQuestionBtn.addEventListener("click",(e)=>{
                 e.preventDefault();
                 createQuestion();
             });
             deleteQuestionBtn.addEventListener('click',(e)=>{
                  e.preventDefault();
                  removeQuestions();
             });
             selectAllBtn.addEventListener("click",(e)=>{
                 e.preventDefault();
                 selectAllQuestions();
             });
             function selectAllQuestions(){
                const questions= questionContainer.querySelectorAll(".question-item");
                questions.forEach(question=>{
                   const input= question.querySelector(".check-wrap input");
                   input.checked=isCheck;
                   input.dispatchEvent(new Event("change"));
                })
                isCheck =!isCheck;
             }
             function removeQuestions(){
                const questions= questionContainer.querySelectorAll(".question-item");
                questions.forEach(question=>{
                    if(question.querySelector(".check-wrap input").checked){
                        question.remove();
                        questionCount--;
                    }
                })
                updateIndexes();
             }
             function updateIndexes(){
                 const questions= questionContainer.querySelectorAll(".question-item");
                 questions.forEach((question,index)=>{
                     question.querySelectorAll('[name^="Template.Questions"]').forEach(item=>{
                          item.name=item.name.replace(/\[\d+\]/g,`[${index}]`);
                     });
                 })
             }

             function createQuestion(){
                 const clone=questionTemplate.content.cloneNode(true);                 
                 const questionElement=clone.querySelector(".question-item");
                 questionElement.innerHTML=questionElement.innerHTML.replace(/{{index}}/g,questionCount++);
                 questionElement.addEventListener('click',(e)=>{
                      if(e.target.classList.contains('question-item')|| e.target.classList.contains('check-wrap')){
                        const checkBox= questionElement.querySelector(".check-wrap input");
                        checkBox.checked=!checkBox.checked;
                        checkBox.dispatchEvent(new Event('change'));
                     }
                 });
                 questionElement.querySelector(".check-wrap input").addEventListener("change",(e)=>{
                     if(e.target.checked){
                           questionElement.classList.add("border-warning");
                            questionElement.classList.remove("border")
                           questionElement.classList.add("border-start");
                     }
                     else{
                           questionElement.classList.remove("border-warning")
                             questionElement.classList.add("border")
                            questionElement.classList.remove("border-start");
                     }
                 });
                 questionElement.querySelector(".description-check").addEventListener('change',()=>{
                     questionElement.querySelector(".description-container").classList.toggle("d-none");
                 });                

                 ChangeQuestionType(questionElement,questionCount-1);
                 questionContainer.appendChild(questionElement);
             }
             function ChangeQuestionType(questionElement,questionIndex){
                 const questionType=questionElement.querySelector(".question-type");
                 const answerContainer=questionElement.querySelector(".answer-container");
                  answerContainer.appendChild(createAnswerElement(questionType.value,questionIndex));
                  questionType.addEventListener('input',(e)=>{
                     const selectValue=e.target.value;
                     const answer= createAnswerElement(selectValue,questionIndex);
                     answerContainer.innerHTML="";
                     answerContainer.appendChild(answer);
                  });
             }
             function reindexOptions(container){
                  container.querySelectorAll(`[name^="Template.Questions"]`).forEach((input,index)=>{
                        input.name=input.name.replace(/AnswerOptions\[\d+\]/g,`AnswerOptions[${index}]`);
                  });
             }
              function createCheckBox(questionIndex,optIndex){
                   const checkBoxContainer=document.createElement("div");
                   checkBoxContainer.className = "d-flex align-items-center gap-2  p-2 rounded";
                    
                    const checkTextInput=document.createElement("input");
                    checkTextInput.type="text";
                    checkTextInput.className = `form-control`;
                    checkTextInput.placeholder = "Option text";
                    checkTextInput.name=`Template.Questions[${questionIndex}].AnswerOptions[${optIndex}].Text`;

                    const checkInput=document.createElement("input");
                    checkInput.type="checkbox";
                    checkInput.disabled=true;
                    checkInput.className = "form-check-input me-2";

                    const closeBtn=document.createElement("button");
                    closeBtn.className="btn btn-sm btn-outline-danger ms-auto";
                    closeBtn.innerHTML = `<i class="bi bi-x"></i>`;
                    closeBtn.addEventListener('click',(e)=>{
                        e.preventDefault();
                        const cntr=e.target.closest(".checkboxes-container");
                         e.target.closest('div').remove();
                        reindexOptions(cntr);
                    });

                    checkBoxContainer.appendChild(checkInput);
                    checkBoxContainer.appendChild(checkTextInput);
                    checkBoxContainer.appendChild(closeBtn);
                    return checkBoxContainer;
             }

              function createAnswerElement(type,questionIndex){
                 const container = document.createElement("div");
                 switch(type){
                     case "1":                        
                         container.innerHTML = `
                         <label class="form-label fw-semibold">Answer</label>
                         <textarea class="form-control" rows="3" disabled></textarea>`;
                         break;
                     case "2":
                         container.innerHTML = `
                         <label class="form-label fw-semibold">Options</label>
                         <div class="checkboxes-container mb-2"></div>
                         <button class="btn btn-sm btn-outline-primary add-option">
                            <i class="bi bi-plus-circle"></i> Add Option
                         </button> `;
                         const checkboxesContainer = container.querySelector('.checkboxes-container');
                         checkboxesContainer.appendChild(createCheckBox(questionIndex,0));
                         container.querySelector('.add-option').addEventListener('click', (e) => {
                            e.preventDefault();
                            const optionIndex=checkboxesContainer.querySelectorAll("div").length;
                            checkboxesContainer.appendChild(createCheckBox(questionIndex,optionIndex));
                         });
                         break;
                     case "3":
                         container.innerHTML = `
                             <label class="form-label fw-semibold">Answer</label>
                             <input type="number" class="form-control" disabled>`;
                         break;
                     default:
                           container.innerHTML = `
                            <label class="form-label fw-semibold">Answer</label>
                            <input type="text" class="form-control" disabled>`;
                 }
                  return container;
             }


            function enableTypeHead(inputId,url){
              $(`#${inputId}`).typeahead({
                  minLength: 1, // Начинаем поиск после ввода 1 буквы
                  highlight: true, // Подсвечиваем совпадения
                  source: function (query, process) {
                      return $.get(url, { query: query }, function (data) {
                          return process(data); // Обновляем список вариантов
                      });
                  }
              });
            }
           enableTypeHead('tag-input',"/tags");
           enableTypeHead('email-input',"/emails");
           

        });
    </script>


}
